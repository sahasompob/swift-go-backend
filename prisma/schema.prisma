generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  createdAt DateTime  @default(now())
  password  String
  role      UserRole  @default(CUSTOMER)
  customer  Customer?
  driver    Driver?
  Post      Post[]
  @@index([role])
}

model Customer {
  id       Int       @id @default(autoincrement())
  userId   Int       @unique
  name     String
  phone    String    @unique
  bookings Booking[]
  user     User      @relation(fields: [userId], references: [id])
}

model Driver {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  licenseNo String
  name      String
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  authorId  Int
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
}

model Vehicle {
  id        Int           @id @default(autoincrement())
  name      String
  capacity  Int
  imageUrl  String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  status    VehicleStatus @default(ACTIVE)
  bookings  Booking[]
  prices    Price[]

  @@index([status])
}

model Price {
  id            Int       @id @default(autoincrement())
  vehicleId     Int
  minKm         Float
  maxKm         Float
  basePrice     Float
  pricePerKm    Float
  currency      String    @default("THB")
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId, effectiveFrom, effectiveTo])
}

model Booking {
  id            Int           @id @default(autoincrement())
  customerId    Int
  vehicleId     Int
  fromAddress   String
  toAddress     String
  distanceKm    Float
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  driverId      Int?
  dropoffAt     DateTime
  fromLat       Float
  fromLng       Float
  pickupAt      DateTime
  routePolyline String?
  toLat         Float
  toLng         Float
  customer      Customer      @relation(fields: [customerId], references: [id])
  driver        Driver?       @relation(fields: [driverId], references: [id])
  vehicle       Vehicle       @relation(fields: [vehicleId], references: [id])

  @@index([customerId, createdAt])
  @@index([driverId, pickupAt, dropoffAt])
  @@index([vehicleId, pickupAt, dropoffAt])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
  QUOTED
  ASSIGNED
  IN_PROGRESS
}

enum UserRole {
  ADMIN
  CUSTOMER
  DRIVER
}

enum VehicleStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
}
